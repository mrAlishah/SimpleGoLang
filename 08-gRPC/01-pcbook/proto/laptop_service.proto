syntax = "proto3";

package proto;

option go_package = ".;pb";

import "proto/laptop_message.proto";
import "proto/filter_message.proto";


message CreateLaptopRequest {
    Laptop laptop = 1;
}

message CreateLaptopResponse {
    string id = 1;
}

message SearchLaptopRequest { Filter filter = 1; }

message SearchLaptopResponse { Laptop laptop = 1; }

message ImageInfo {
    string laptop_id = 1;
    string image_type = 2; //such as ".jpg" or ".png".
}
//The idea is to divide the image file into multiple chunks, and send them one by one to the server in each request message.
// I use a oneof field here because the first request will only contain the metadata, or some basic information of the image. 
//Then the following requests will contain the image data chunks.
message UploadImageRequest {
    oneof data {
      ImageInfo info = 1;
      bytes chunk_data = 2;
    };
  }

//will be returned to the client once the server has received all chunks of the image
message UploadImageResponse {
    string id = 1;
    uint32 size = 2;
}

message RateLaptopRequest {
    string laptop_id = 1;
    double score = 2;
}

message RateLaptopResponse {
    string laptop_id = 1;
    uint32 rated_count = 2;
    double average_score = 3;
}

service LaptopService {
    // Start with the keyword rpc, then the name of the RPC is CreateLaptop. 
    //It takes a CreateLaptopRequest as input, and returns a CreateLaptopResponse.
    // End it with a pair of curly brackets and a semicolon. 
    
    //rpc func(input) return(output) {};
    rpc CreateLaptop (CreateLaptopRequest) returns (CreateLaptopResponse) {};

    rpc SearchLaptop (SearchLaptopRequest) returns (stream SearchLaptopResponse) {};

    rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse) {};

    rpc RateLaptop(stream RateLaptopRequest) returns (stream RateLaptopResponse) {};

}